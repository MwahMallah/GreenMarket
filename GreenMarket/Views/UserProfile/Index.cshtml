@model UserEntity

<div class="container text-center">
    <style>
        .profile-container {
            width: 600px;
            margin: 50px auto;
            text-align: center;
            border: 1px solid black;
            padding: 20px;
            border-radius: 10px;
        }

        .profile-container h1 {
            font-size: 36px;
            margin-bottom: 20px;
        }

        .profile-container hr {
            border: 1px solid black;
            margin-bottom: 20px;
        }

        .profile-picture-wrap {
            width: 150px;
            height: 150px;
            border-radius: 50%;
            margin: 0px auto 20px auto;
            overflow: hidden;
            display: flex;
            justify-content: center;
            align-items: center;
        }

        .profile-picture {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        .profile-details {
            text-align: left;
            margin: 0 auto;
            max-width: 400px;
        }

        .profile-details h3 {
            margin-top: 15px;
        }

        .profile-links {
            margin-top: 20px;
        }

        .profile-links a {
            margin-right: 20px;
            color: blue;
            text-decoration: underline;
        }
    </style>
    <link rel="stylesheet" href="css/rating.css">
    
    <div class="profile-container">
    <h2>USER PROFILE</h2>
    <hr>

    <div class="profile-picture-wrap">
        <img src="@Model.ImgUrl" alt="User profile picture" class="profile-picture">
    </div>

    <div class="profile-details">
        <h3><strong>Signed In As:</strong></h3>
        <p>@Model.Username</p>
        <p>@Model.Role</p>

        <h3>User Details</h3>
        <p><strong>Name:</strong> @Model.Name</p>
        <p><strong>Surname:</strong> @Model.Name</p>
        <p><strong>E-mail:</strong> @Model.Email</p>
        
    </div>

    <div>
        @foreach (var order in Model.Orders)
        {
            <div class="mt-5 d-flex justify-content-between align-items-center">
                <h5 class="review-stat">@order.Amount @order.Product.Name</h5>
                <div class="rating rating__set">
                    <div class="rating__body">
                        <div class="rating__active"></div>
                        <div class="rating__items">
                            @for (int i = 1; i <= 5; i++)
                            {
                                <input type="radio" 
                                       value="@i" 
                                       order_id="@order.Id"
                                       name="rating" 
                                       class="rating__item">
                            }
                        </div>
                    </div>
                    <div class="rating__value">
                        @((order.Rating.HasValue) ? order.Rating.Value.ToString("0.0") : "Rate product")
                    </div>
                </div>
            </div>
        }
    </div>
    
    <div class="profile-links">
        <a asp-controller="UserProfile" asp-action="Edit" asp-route-id="@Model.Id">Edit profile</a>
        <a asp-controller="Account" asp-action="Logout">Log out</a>
        <!-- <a asp-controller="Account" asp-action="ChangePassword">Change password</a> -->
    </div>
</div>
</div>


<script >
    const ratings = document.querySelectorAll(".rating");
    
    if (ratings.length > 0) {
        initRatings(ratings);
    }
    
    function initRatings(ratings) {
        console.log(ratings.length);
        for (const rating of ratings) {
            initRating(rating);
        }
        
        function initRating(rating) {
            let ratingActive, ratingValue; 
            initRatingArgs(rating);
            setActiveRatingWidth(ratingValue.innerHTML);
            
            if (rating.classList.contains("rating__set")) {
                enableRatingSet(rating);
            }
            
            function setActiveRatingWidth(value) {
                let activeRatingWidth;
                //if value is number
                if (!isNaN(value)) {
                    activeRatingWidth = (value / 5) * 100;
                } else {
                    activeRatingWidth = 0;
                }
                
                ratingActive.style.width = `${activeRatingWidth}%`;
            }
            
            function initRatingArgs(rating) {
                ratingActive = rating.querySelector(".rating__active");        
                ratingValue  = rating.querySelector(".rating__value");        
            }
            
            function enableRatingSet(rating) {
                const ratingItems = rating.querySelectorAll(".rating__item");
                for (const ratingItem of ratingItems) {
                    ratingItem.addEventListener("mouseenter", () => {
                        setActiveRatingWidth(ratingItem.value);
                    });
                    
                    ratingItem.addEventListener("mouseleave", () => {
                        setActiveRatingWidth(ratingValue.innerHTML);
                    });
                    
                    ratingItem.addEventListener("click", () => {
                        //format in 1.0 format
                        ratingValue.innerHTML = (parseFloat(ratingItem.value)).toFixed(1);
                        setActiveRatingWidth(ratingValue.innerHTML);
                        
                        fetch('/UserProfile/RateProduct', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'RequestVerificationToken': '@Html.AntiForgeryToken()'
                            },
                            body: JSON.stringify({ 
                                orderId: ratingItem.getAttribute("order_id"), 
                                rating: ratingItem.value })
                        })
                        .then(res => res.text())
                        .then(msg => Toastify({
                             text: msg,
                             duration: 3000,
                             close: true,
                             gravity: "top",
                             position: "center", 
                             backgroundColor: "green",
                             stopOnFocus: true
                         }).showToast());
                    });
                }
                
            }
        }
        
    }
</script>
