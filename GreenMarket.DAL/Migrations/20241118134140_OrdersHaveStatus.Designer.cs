// <auto-generated />
using System;
using GreenMarket.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GreenMarket.DAL.Migrations
{
    [DbContext(typeof(GreenMarketDbContext))]
    [Migration("20241118134140_OrdersHaveStatus")]
    partial class OrdersHaveStatus
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GreenMarket.DAL.Entities.AttributeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Attributes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6c7995ed-96d9-4c77-bb00-e4091e431903"),
                            CategoryId = new Guid("70c6d3aa-38b8-43fa-89e3-6309a1facab5"),
                            Name = "Price/kg"
                        },
                        new
                        {
                            Id = new Guid("ec8b8385-071e-4b5d-a63f-d2e69dbf787a"),
                            CategoryId = new Guid("96ca1175-1efe-4574-8d3c-71725871abe5"),
                            Name = "Price/piece"
                        },
                        new
                        {
                            Id = new Guid("c5ad7cd8-55ff-4a83-a4e1-aa2c3dc9a797"),
                            CategoryId = new Guid("96ca1175-1efe-4574-8d3c-71725871abe5"),
                            Name = "Place of origin"
                        });
                });

            modelBuilder.Entity("GreenMarket.DAL.Entities.CategoryEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImgUrl")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4e680d2d-dac6-42af-bb89-e693ba143b85"),
                            Name = "Crops"
                        },
                        new
                        {
                            Id = new Guid("56907d5f-2054-404b-999a-83f1c5ec8b54"),
                            ImgUrl = "https://www.healthyeating.org/images/default-source/home-0.0/nutrition-topics-2.0/general-nutrition-wellness/2-2-2-3foodgroups_fruits_detailfeature_thumb.jpg?sfvrsn=7abe71fe_4",
                            Name = "Fruits",
                            ParentId = new Guid("4e680d2d-dac6-42af-bb89-e693ba143b85")
                        },
                        new
                        {
                            Id = new Guid("088f01a4-7061-4158-bd3e-a56a461dd96b"),
                            ImgUrl = "https://cdn.britannica.com/17/196817-159-9E487F15/vegetables.jpg",
                            Name = "Vegetables",
                            ParentId = new Guid("4e680d2d-dac6-42af-bb89-e693ba143b85")
                        },
                        new
                        {
                            Id = new Guid("c13f3cc0-24ce-4453-98f8-cc814b7d6806"),
                            ImgUrl = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTNIY9W5DxVGXTtV4gR1ZU5qipQsRkpK2pZ3Q&s",
                            Name = "Tomato",
                            ParentId = new Guid("088f01a4-7061-4158-bd3e-a56a461dd96b")
                        },
                        new
                        {
                            Id = new Guid("bfe85c2d-92bf-4191-8000-1eee2ec4f700"),
                            ImgUrl = "https://volyne.e-coop.cz/pub/media/catalog/product/cache/5e943ec86580054ec2fda73128d751b9/e/p/ep_2004800329.jpeg",
                            Name = "Tomino",
                            ParentId = new Guid("c13f3cc0-24ce-4453-98f8-cc814b7d6806")
                        },
                        new
                        {
                            Id = new Guid("abb2c05e-ddf5-433a-b92c-7f19d5bf0b1b"),
                            ImgUrl = "https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcSaogrbCqgly8ABLDeqzUKy3Q73FtM_p1XeKseySN5uIjauTVtz",
                            Name = "Roma",
                            ParentId = new Guid("c13f3cc0-24ce-4453-98f8-cc814b7d6806")
                        },
                        new
                        {
                            Id = new Guid("70c6d3aa-38b8-43fa-89e3-6309a1facab5"),
                            ImgUrl = "https://upload.wikimedia.org/wikipedia/commons/thumb/a/ab/Patates.jpg/1200px-Patates.jpg",
                            Name = "Potato",
                            ParentId = new Guid("088f01a4-7061-4158-bd3e-a56a461dd96b")
                        },
                        new
                        {
                            Id = new Guid("c580b352-f047-4331-a404-4cdc7c6b5135"),
                            ImgUrl = "https://btiscience.org/wp-content/uploads/US-Watermelon-Varieties_600dpi.jpg",
                            Name = "Watermelon",
                            ParentId = new Guid("56907d5f-2054-404b-999a-83f1c5ec8b54")
                        },
                        new
                        {
                            Id = new Guid("96ca1175-1efe-4574-8d3c-71725871abe5"),
                            ImgUrl = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSp05ca_Cf1CqlqghC5DgeX3PNdU-Kup6h1GQ&s",
                            Name = "Avocado",
                            ParentId = new Guid("56907d5f-2054-404b-999a-83f1c5ec8b54")
                        });
                });

            modelBuilder.Entity("GreenMarket.DAL.Entities.OrderEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float?>("Rating")
                        .HasColumnType("real");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("GreenMarket.DAL.Entities.ProductAttributeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AttributeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("AttributeId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductAttribute");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d8ec25ea-2ffe-408d-9eb3-fba0bce97bc3"),
                            AttributeId = new Guid("ec8b8385-071e-4b5d-a63f-d2e69dbf787a"),
                            ProductId = new Guid("5041b425-ae79-4eae-b645-b6a24da1cf05"),
                            Value = "25"
                        },
                        new
                        {
                            Id = new Guid("9cc27315-9b42-424f-a6cd-3a94ec12d6b2"),
                            AttributeId = new Guid("ec8b8385-071e-4b5d-a63f-d2e69dbf787a"),
                            ProductId = new Guid("beac6e66-715a-431f-8fd9-2e0fee87009d"),
                            Value = "35"
                        },
                        new
                        {
                            Id = new Guid("f8b4a051-c06c-4ab7-9f0c-296f4b8af533"),
                            AttributeId = new Guid("6c7995ed-96d9-4c77-bb00-e4091e431903"),
                            ProductId = new Guid("aa6fe39f-9ed5-4c9b-bc27-2e537f02ad39"),
                            Value = "100"
                        },
                        new
                        {
                            Id = new Guid("dff56e69-de33-438a-99da-41b7340bcc9b"),
                            AttributeId = new Guid("6c7995ed-96d9-4c77-bb00-e4091e431903"),
                            ProductId = new Guid("e92a4076-c1bd-42dd-9772-da3e2a79e113"),
                            Value = "80"
                        },
                        new
                        {
                            Id = new Guid("e20b0bef-aa87-44bd-b452-42ef6db720b6"),
                            AttributeId = new Guid("c5ad7cd8-55ff-4a83-a4e1-aa2c3dc9a797"),
                            ProductId = new Guid("5041b425-ae79-4eae-b645-b6a24da1cf05"),
                            Value = "Czechia"
                        },
                        new
                        {
                            Id = new Guid("7254bab6-a69e-4642-bc0e-c194ca919c45"),
                            AttributeId = new Guid("c5ad7cd8-55ff-4a83-a4e1-aa2c3dc9a797"),
                            ProductId = new Guid("beac6e66-715a-431f-8fd9-2e0fee87009d"),
                            Value = "Puerto Rico"
                        });
                });

            modelBuilder.Entity("GreenMarket.DAL.Entities.ProductEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatorId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e92a4076-c1bd-42dd-9772-da3e2a79e113"),
                            CategoryId = new Guid("70c6d3aa-38b8-43fa-89e3-6309a1facab5"),
                            CreatorId = new Guid("31fd6327-048f-44bd-be12-99911bb27240"),
                            ImgUrl = "https://seedlefarms.com/wp-content/uploads/2022/01/Orange-Sweet-Potatoe.jpg",
                            Name = "Orange sweet",
                            Stock = 3
                        },
                        new
                        {
                            Id = new Guid("aa6fe39f-9ed5-4c9b-bc27-2e537f02ad39"),
                            CategoryId = new Guid("70c6d3aa-38b8-43fa-89e3-6309a1facab5"),
                            CreatorId = new Guid("31fd6327-048f-44bd-be12-99911bb27240"),
                            ImgUrl = "https://www.kroger.com/product/images/large/front/0000000004072?banner=harristeeter",
                            Name = "Russet",
                            Stock = 4
                        },
                        new
                        {
                            Id = new Guid("edfa3025-e45f-41de-90a1-32233f0a59a4"),
                            CategoryId = new Guid("bfe85c2d-92bf-4191-8000-1eee2ec4f700"),
                            CreatorId = new Guid("bab0fb5f-b90e-4790-9cdf-fed3df5cae3f"),
                            Description = "A sweet and smooth tomino, offering a unique balance of sweetness and creaminess.",
                            Name = "Anton's tasty tomino",
                            Stock = 5
                        },
                        new
                        {
                            Id = new Guid("32234a9a-228c-4b30-9587-723adf26effd"),
                            CategoryId = new Guid("bfe85c2d-92bf-4191-8000-1eee2ec4f700"),
                            CreatorId = new Guid("65f33e11-6465-4cd0-bb4b-fa945995704c"),
                            Description = "A delicious, creamy tomino with a rich, savory flavor. Perfect for any tomato lover!",
                            Name = "Ilya's sweet tomino",
                            Stock = 1
                        },
                        new
                        {
                            Id = new Guid("50324501-3993-42eb-a6d1-6c00792f3742"),
                            CategoryId = new Guid("c580b352-f047-4331-a404-4cdc7c6b5135"),
                            CreatorId = new Guid("bab0fb5f-b90e-4790-9cdf-fed3df5cae3f"),
                            Name = "Augusta",
                            Stock = 2
                        },
                        new
                        {
                            Id = new Guid("457d8f40-00f7-42a6-b451-af0c11e36a1b"),
                            CategoryId = new Guid("c580b352-f047-4331-a404-4cdc7c6b5135"),
                            CreatorId = new Guid("bab0fb5f-b90e-4790-9cdf-fed3df5cae3f"),
                            Name = "Dragon King",
                            Stock = 3
                        },
                        new
                        {
                            Id = new Guid("dd833414-298c-41a7-b225-9a5b8d199926"),
                            CategoryId = new Guid("c580b352-f047-4331-a404-4cdc7c6b5135"),
                            CreatorId = new Guid("bab0fb5f-b90e-4790-9cdf-fed3df5cae3f"),
                            Name = "Happy family",
                            Stock = 10
                        },
                        new
                        {
                            Id = new Guid("5041b425-ae79-4eae-b645-b6a24da1cf05"),
                            CategoryId = new Guid("96ca1175-1efe-4574-8d3c-71725871abe5"),
                            CreatorId = new Guid("31fd6327-048f-44bd-be12-99911bb27240"),
                            Description = "Fuerte avocados are medium to large with smooth, thick skin and a mild, creamy flavor. Perfect for slicing and enjoying in salads, or on toast.",
                            ImgUrl = "https://www.tomorrowsharvest.com/store/pub/media/catalog/product/cache/49e19764d17a195b05fde2ec48914513/2/2/2210_fuerte_avocado_fruit-full.jpg",
                            Name = "Fuerte",
                            Stock = 11
                        },
                        new
                        {
                            Id = new Guid("beac6e66-715a-431f-8fd9-2e0fee87009d"),
                            CategoryId = new Guid("96ca1175-1efe-4574-8d3c-71725871abe5"),
                            CreatorId = new Guid("28398fc8-c192-4461-bf6e-204c592e8c80"),
                            Description = "Gwen avocados are a variety known for their creamy texture and rich, nutty flavor. They are slightly smaller than Has avocados and have a smoother texture.",
                            ImgUrl = "https://www.producemarketguide.com/media/user_v1oz1Yz27j/584/gwen-avocado_variety-page.png",
                            Name = "Gwen",
                            Stock = 5
                        });
                });

            modelBuilder.Entity("GreenMarket.DAL.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ImgUrl")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2fd8596e-6d7f-4928-9614-5c32563d93b1"),
                            Email = "admin@admin.com",
                            ImgUrl = "",
                            Name = "admin",
                            Password = "admin",
                            Role = 0,
                            Username = "admin"
                        },
                        new
                        {
                            Id = new Guid("31fd6327-048f-44bd-be12-99911bb27240"),
                            Email = "maksim@mail.com",
                            ImgUrl = "https://i.natgeofe.com/n/548467d8-c5f1-4551-9f58-6817a8d2c45e/NationalGeographic_2572187_3x4.jpg",
                            Name = "Maksim",
                            Password = "123",
                            Role = 1,
                            Username = "MaksimDubr"
                        },
                        new
                        {
                            Id = new Guid("bab0fb5f-b90e-4790-9cdf-fed3df5cae3f"),
                            Email = "anton@mail.com",
                            ImgUrl = "https://images.pexels.com/photos/1108099/pexels-photo-1108099.jpeg",
                            Name = "Anton",
                            Password = "123456",
                            Role = 1,
                            Username = "AntonHavl"
                        },
                        new
                        {
                            Id = new Guid("28398fc8-c192-4461-bf6e-204c592e8c80"),
                            Email = "nastya@mail.com",
                            ImgUrl = "https://cdn.pixabay.com/photo/2021/09/20/09/17/dog-6640280_1280.jpg",
                            Name = "Nastya",
                            Password = "1234",
                            Role = 1,
                            Username = "NastyaMiro"
                        },
                        new
                        {
                            Id = new Guid("65f33e11-6465-4cd0-bb4b-fa945995704c"),
                            Email = "ilya@mail.com",
                            ImgUrl = "https://cdn.pixabay.com/photo/2021/09/20/09/17/dog-6640280_1280.jpg",
                            Name = "Ilya",
                            Password = "123456",
                            Role = 1,
                            Username = "IlyaVeryBad"
                        });
                });

            modelBuilder.Entity("GreenMarket.DAL.Entities.AttributeEntity", b =>
                {
                    b.HasOne("GreenMarket.DAL.Entities.CategoryEntity", "Category")
                        .WithMany("Attributes")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("GreenMarket.DAL.Entities.CategoryEntity", b =>
                {
                    b.HasOne("GreenMarket.DAL.Entities.CategoryEntity", "Parent")
                        .WithMany("SubCategories")
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("GreenMarket.DAL.Entities.OrderEntity", b =>
                {
                    b.HasOne("GreenMarket.DAL.Entities.ProductEntity", "Product")
                        .WithMany("Orders")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GreenMarket.DAL.Entities.UserEntity", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GreenMarket.DAL.Entities.ProductAttributeEntity", b =>
                {
                    b.HasOne("GreenMarket.DAL.Entities.AttributeEntity", "Attribute")
                        .WithMany("Products")
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GreenMarket.DAL.Entities.ProductEntity", "Product")
                        .WithMany("Attributes")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Attribute");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("GreenMarket.DAL.Entities.ProductEntity", b =>
                {
                    b.HasOne("GreenMarket.DAL.Entities.CategoryEntity", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GreenMarket.DAL.Entities.UserEntity", "Creator")
                        .WithMany("CreatedProducts")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("GreenMarket.DAL.Entities.AttributeEntity", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("GreenMarket.DAL.Entities.CategoryEntity", b =>
                {
                    b.Navigation("Attributes");

                    b.Navigation("Products");

                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("GreenMarket.DAL.Entities.ProductEntity", b =>
                {
                    b.Navigation("Attributes");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("GreenMarket.DAL.Entities.UserEntity", b =>
                {
                    b.Navigation("CreatedProducts");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
