// <auto-generated />
using System;
using GreenMarket.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GreenMarket.DAL.Migrations
{
    [DbContext(typeof(GreenMarketDbContext))]
    [Migration("20241113123435_OrdersMustHaveAmount")]
    partial class OrdersMustHaveAmount
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GreenMarket.DAL.Entities.AttributeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Attributes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3ac5e66e-75a0-46da-8f4b-b82fd750c710"),
                            CategoryId = new Guid("038a4032-be22-4bdd-8ae1-c0a60c7b8c6f"),
                            Name = "Price/kg"
                        },
                        new
                        {
                            Id = new Guid("cd8c1701-c3ed-436e-be59-6e47f15358e2"),
                            CategoryId = new Guid("a4fd52d9-1792-4333-97c5-9616df5d5d23"),
                            Name = "Price/piece"
                        },
                        new
                        {
                            Id = new Guid("b06d1604-d958-46fe-beac-a7e63cd5243a"),
                            CategoryId = new Guid("a4fd52d9-1792-4333-97c5-9616df5d5d23"),
                            Name = "Place of origin"
                        });
                });

            modelBuilder.Entity("GreenMarket.DAL.Entities.CategoryEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImgUrl")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bb034bf2-76be-4b77-a7d7-a215cdb533cd"),
                            Name = "Crops"
                        },
                        new
                        {
                            Id = new Guid("2c2fc6e6-eb91-47ec-a553-cc768f6508ff"),
                            ImgUrl = "https://www.healthyeating.org/images/default-source/home-0.0/nutrition-topics-2.0/general-nutrition-wellness/2-2-2-3foodgroups_fruits_detailfeature_thumb.jpg?sfvrsn=7abe71fe_4",
                            Name = "Fruits",
                            ParentId = new Guid("bb034bf2-76be-4b77-a7d7-a215cdb533cd")
                        },
                        new
                        {
                            Id = new Guid("c3f8d5cf-8c55-4e26-a890-5c6d6aa38d2d"),
                            ImgUrl = "https://cdn.britannica.com/17/196817-159-9E487F15/vegetables.jpg",
                            Name = "Vegetables",
                            ParentId = new Guid("bb034bf2-76be-4b77-a7d7-a215cdb533cd")
                        },
                        new
                        {
                            Id = new Guid("bd2a0ab3-d940-4e82-83e0-1234b22c15e0"),
                            ImgUrl = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTNIY9W5DxVGXTtV4gR1ZU5qipQsRkpK2pZ3Q&s",
                            Name = "Tomato",
                            ParentId = new Guid("c3f8d5cf-8c55-4e26-a890-5c6d6aa38d2d")
                        },
                        new
                        {
                            Id = new Guid("6dd81d26-12e8-49bb-9be6-749593da15df"),
                            ImgUrl = "https://volyne.e-coop.cz/pub/media/catalog/product/cache/5e943ec86580054ec2fda73128d751b9/e/p/ep_2004800329.jpeg",
                            Name = "Tomino",
                            ParentId = new Guid("bd2a0ab3-d940-4e82-83e0-1234b22c15e0")
                        },
                        new
                        {
                            Id = new Guid("8d009112-918d-479e-bec5-46bc08310b1c"),
                            ImgUrl = "https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcSaogrbCqgly8ABLDeqzUKy3Q73FtM_p1XeKseySN5uIjauTVtz",
                            Name = "Roma",
                            ParentId = new Guid("bd2a0ab3-d940-4e82-83e0-1234b22c15e0")
                        },
                        new
                        {
                            Id = new Guid("038a4032-be22-4bdd-8ae1-c0a60c7b8c6f"),
                            ImgUrl = "https://upload.wikimedia.org/wikipedia/commons/thumb/a/ab/Patates.jpg/1200px-Patates.jpg",
                            Name = "Potato",
                            ParentId = new Guid("c3f8d5cf-8c55-4e26-a890-5c6d6aa38d2d")
                        },
                        new
                        {
                            Id = new Guid("7f4042f3-a369-44ab-9a47-42c6bf0a38ca"),
                            ImgUrl = "https://btiscience.org/wp-content/uploads/US-Watermelon-Varieties_600dpi.jpg",
                            Name = "Watermelon",
                            ParentId = new Guid("2c2fc6e6-eb91-47ec-a553-cc768f6508ff")
                        },
                        new
                        {
                            Id = new Guid("a4fd52d9-1792-4333-97c5-9616df5d5d23"),
                            ImgUrl = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSp05ca_Cf1CqlqghC5DgeX3PNdU-Kup6h1GQ&s",
                            Name = "Avocado",
                            ParentId = new Guid("2c2fc6e6-eb91-47ec-a553-cc768f6508ff")
                        });
                });

            modelBuilder.Entity("GreenMarket.DAL.Entities.ProductAttributeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AttributeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("AttributeId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductAttribute");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1ab9ccd9-7c68-40f6-bf7a-9f110d678c02"),
                            AttributeId = new Guid("cd8c1701-c3ed-436e-be59-6e47f15358e2"),
                            ProductId = new Guid("74c7e97b-c13e-4136-a889-34b3f04485c3"),
                            Value = "25"
                        },
                        new
                        {
                            Id = new Guid("e771ce0b-8c02-49f2-8a4f-c42645ba0e84"),
                            AttributeId = new Guid("cd8c1701-c3ed-436e-be59-6e47f15358e2"),
                            ProductId = new Guid("621fb335-8cbf-4594-8b36-437981e8c8e2"),
                            Value = "35"
                        },
                        new
                        {
                            Id = new Guid("3009c2de-a4f7-4bed-86c2-99a545437f30"),
                            AttributeId = new Guid("3ac5e66e-75a0-46da-8f4b-b82fd750c710"),
                            ProductId = new Guid("891ec03e-4425-4207-9322-f4d71f017341"),
                            Value = "100"
                        },
                        new
                        {
                            Id = new Guid("ff82e93d-c5cc-4493-b667-8253638111a4"),
                            AttributeId = new Guid("3ac5e66e-75a0-46da-8f4b-b82fd750c710"),
                            ProductId = new Guid("12b9aa1e-8d9a-49e3-ae0c-2f018378e882"),
                            Value = "80"
                        },
                        new
                        {
                            Id = new Guid("14dca921-49c6-423a-8f03-96c72463d793"),
                            AttributeId = new Guid("b06d1604-d958-46fe-beac-a7e63cd5243a"),
                            ProductId = new Guid("74c7e97b-c13e-4136-a889-34b3f04485c3"),
                            Value = "Czechia"
                        },
                        new
                        {
                            Id = new Guid("12c30319-5d71-4302-b129-dc4c90e0ce56"),
                            AttributeId = new Guid("b06d1604-d958-46fe-beac-a7e63cd5243a"),
                            ProductId = new Guid("621fb335-8cbf-4594-8b36-437981e8c8e2"),
                            Value = "Puerto Rico"
                        });
                });

            modelBuilder.Entity("GreenMarket.DAL.Entities.ProductEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("12b9aa1e-8d9a-49e3-ae0c-2f018378e882"),
                            CategoryId = new Guid("038a4032-be22-4bdd-8ae1-c0a60c7b8c6f"),
                            ImgUrl = "https://seedlefarms.com/wp-content/uploads/2022/01/Orange-Sweet-Potatoe.jpg",
                            Name = "Orange sweet"
                        },
                        new
                        {
                            Id = new Guid("891ec03e-4425-4207-9322-f4d71f017341"),
                            CategoryId = new Guid("038a4032-be22-4bdd-8ae1-c0a60c7b8c6f"),
                            ImgUrl = "https://www.kroger.com/product/images/large/front/0000000004072?banner=harristeeter",
                            Name = "Russet"
                        },
                        new
                        {
                            Id = new Guid("217f09bd-7ff3-47f2-b8e7-8afaa68ede05"),
                            CategoryId = new Guid("6dd81d26-12e8-49bb-9be6-749593da15df"),
                            Description = "A sweet and smooth tomino, offering a unique balance of sweetness and creaminess.",
                            Name = "Anton's tasty tomino"
                        },
                        new
                        {
                            Id = new Guid("86e3f8c1-90b1-4abe-938b-8a1976d6e3bf"),
                            CategoryId = new Guid("6dd81d26-12e8-49bb-9be6-749593da15df"),
                            Description = "A delicious, creamy tomino with a rich, savory flavor. Perfect for any tomato lover!",
                            Name = "Ilya's sweet tomino"
                        },
                        new
                        {
                            Id = new Guid("27cec6b1-3584-48b5-b2d8-9c19c6d59673"),
                            CategoryId = new Guid("7f4042f3-a369-44ab-9a47-42c6bf0a38ca"),
                            Name = "Augusta"
                        },
                        new
                        {
                            Id = new Guid("5d292fc0-d93b-44fd-b764-d2ca42ff30c0"),
                            CategoryId = new Guid("7f4042f3-a369-44ab-9a47-42c6bf0a38ca"),
                            Name = "Dragon King"
                        },
                        new
                        {
                            Id = new Guid("0aa15e4e-1ce5-44b0-b234-bf100e0ebcd5"),
                            CategoryId = new Guid("7f4042f3-a369-44ab-9a47-42c6bf0a38ca"),
                            Name = "Happy family"
                        },
                        new
                        {
                            Id = new Guid("74c7e97b-c13e-4136-a889-34b3f04485c3"),
                            CategoryId = new Guid("a4fd52d9-1792-4333-97c5-9616df5d5d23"),
                            Description = "Fuerte avocados are medium to large with smooth, thick skin and a mild, creamy flavor. Perfect for slicing and enjoying in salads, or on toast.",
                            ImgUrl = "https://www.tomorrowsharvest.com/store/pub/media/catalog/product/cache/49e19764d17a195b05fde2ec48914513/2/2/2210_fuerte_avocado_fruit-full.jpg",
                            Name = "Fuerte"
                        },
                        new
                        {
                            Id = new Guid("621fb335-8cbf-4594-8b36-437981e8c8e2"),
                            CategoryId = new Guid("a4fd52d9-1792-4333-97c5-9616df5d5d23"),
                            Description = "Gwen avocados are a variety known for their creamy texture and rich, nutty flavor. They are slightly smaller than Has avocados and have a smoother texture.",
                            ImgUrl = "https://www.producemarketguide.com/media/user_v1oz1Yz27j/584/gwen-avocado_variety-page.png",
                            Name = "Gwen"
                        });
                });

            modelBuilder.Entity("GreenMarket.DAL.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ImgUrl")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3a94c7d7-2460-46e2-a93b-530341af2ff3"),
                            Email = "admin@admin.com",
                            ImgUrl = "",
                            Name = "admin",
                            Password = "admin",
                            Role = 0,
                            Username = "admin"
                        },
                        new
                        {
                            Id = new Guid("e0ecb2cc-21f8-4229-be28-84477b39c384"),
                            Email = "maksim@mail.com",
                            ImgUrl = "https://i.natgeofe.com/n/548467d8-c5f1-4551-9f58-6817a8d2c45e/NationalGeographic_2572187_3x4.jpg",
                            Name = "Maksim",
                            Password = "123",
                            Role = 1,
                            Username = "MaksimDubr"
                        },
                        new
                        {
                            Id = new Guid("f4a2bcee-845d-48f4-a6ca-3066ba33b15e"),
                            Email = "anton@mail.com",
                            ImgUrl = "https://images.pexels.com/photos/1108099/pexels-photo-1108099.jpeg",
                            Name = "Anton",
                            Password = "123456",
                            Role = 1,
                            Username = "AntonHavl"
                        },
                        new
                        {
                            Id = new Guid("58bc5fa6-b25a-4d29-a30d-e2ec59639dd3"),
                            Email = "nastya@mail.com",
                            ImgUrl = "https://cdn.pixabay.com/photo/2021/09/20/09/17/dog-6640280_1280.jpg",
                            Name = "Nastya",
                            Password = "1234",
                            Role = 1,
                            Username = "NastyaMiro"
                        });
                });

            modelBuilder.Entity("GreenMarket.DAL.Entities.UserOrderEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("UserOrderEntity");
                });

            modelBuilder.Entity("GreenMarket.DAL.Entities.AttributeEntity", b =>
                {
                    b.HasOne("GreenMarket.DAL.Entities.CategoryEntity", "Category")
                        .WithMany("Attributes")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("GreenMarket.DAL.Entities.CategoryEntity", b =>
                {
                    b.HasOne("GreenMarket.DAL.Entities.CategoryEntity", "Parent")
                        .WithMany("SubCategories")
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("GreenMarket.DAL.Entities.ProductAttributeEntity", b =>
                {
                    b.HasOne("GreenMarket.DAL.Entities.AttributeEntity", "Attribute")
                        .WithMany("Products")
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GreenMarket.DAL.Entities.ProductEntity", "Product")
                        .WithMany("Attributes")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Attribute");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("GreenMarket.DAL.Entities.ProductEntity", b =>
                {
                    b.HasOne("GreenMarket.DAL.Entities.CategoryEntity", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("GreenMarket.DAL.Entities.UserOrderEntity", b =>
                {
                    b.HasOne("GreenMarket.DAL.Entities.ProductEntity", "Product")
                        .WithMany("Customers")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GreenMarket.DAL.Entities.UserEntity", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GreenMarket.DAL.Entities.AttributeEntity", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("GreenMarket.DAL.Entities.CategoryEntity", b =>
                {
                    b.Navigation("Attributes");

                    b.Navigation("Products");

                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("GreenMarket.DAL.Entities.ProductEntity", b =>
                {
                    b.Navigation("Attributes");

                    b.Navigation("Customers");
                });

            modelBuilder.Entity("GreenMarket.DAL.Entities.UserEntity", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
