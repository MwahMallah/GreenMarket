// <auto-generated />
using System;
using GreenMarket.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GreenMarket.DAL.Migrations
{
    [DbContext(typeof(GreenMarketDbContext))]
    [Migration("20241116223053_ProductsHaveStock")]
    partial class ProductsHaveStock
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GreenMarket.DAL.Entities.AttributeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Attributes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ea132e15-a0ec-4f59-b934-37a93ebd7913"),
                            CategoryId = new Guid("bf01faf6-1318-4bbd-804e-2a5ed763a66e"),
                            Name = "Price/kg"
                        },
                        new
                        {
                            Id = new Guid("9bb70179-0832-4361-8f56-d01266499f6b"),
                            CategoryId = new Guid("0ea84195-b170-4950-8888-564da31bc806"),
                            Name = "Price/piece"
                        },
                        new
                        {
                            Id = new Guid("5a53d730-c8e4-4c63-ae68-3f5461f883db"),
                            CategoryId = new Guid("0ea84195-b170-4950-8888-564da31bc806"),
                            Name = "Place of origin"
                        });
                });

            modelBuilder.Entity("GreenMarket.DAL.Entities.CategoryEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImgUrl")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("36a7ffc2-54a7-4e3e-8a49-93c9088c28aa"),
                            Name = "Crops"
                        },
                        new
                        {
                            Id = new Guid("4a359462-d15c-45b1-b063-fdea96d560e2"),
                            ImgUrl = "https://www.healthyeating.org/images/default-source/home-0.0/nutrition-topics-2.0/general-nutrition-wellness/2-2-2-3foodgroups_fruits_detailfeature_thumb.jpg?sfvrsn=7abe71fe_4",
                            Name = "Fruits",
                            ParentId = new Guid("36a7ffc2-54a7-4e3e-8a49-93c9088c28aa")
                        },
                        new
                        {
                            Id = new Guid("bac1ed53-a0b7-45f0-b7cd-0a02594c288e"),
                            ImgUrl = "https://cdn.britannica.com/17/196817-159-9E487F15/vegetables.jpg",
                            Name = "Vegetables",
                            ParentId = new Guid("36a7ffc2-54a7-4e3e-8a49-93c9088c28aa")
                        },
                        new
                        {
                            Id = new Guid("3e862a43-e19d-4aea-85b4-7db06f754476"),
                            ImgUrl = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTNIY9W5DxVGXTtV4gR1ZU5qipQsRkpK2pZ3Q&s",
                            Name = "Tomato",
                            ParentId = new Guid("bac1ed53-a0b7-45f0-b7cd-0a02594c288e")
                        },
                        new
                        {
                            Id = new Guid("238b1023-30bc-4354-9752-18bb831ec690"),
                            ImgUrl = "https://volyne.e-coop.cz/pub/media/catalog/product/cache/5e943ec86580054ec2fda73128d751b9/e/p/ep_2004800329.jpeg",
                            Name = "Tomino",
                            ParentId = new Guid("3e862a43-e19d-4aea-85b4-7db06f754476")
                        },
                        new
                        {
                            Id = new Guid("801527a2-a5f2-4b1b-b8ce-d9d9da0b926d"),
                            ImgUrl = "https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcSaogrbCqgly8ABLDeqzUKy3Q73FtM_p1XeKseySN5uIjauTVtz",
                            Name = "Roma",
                            ParentId = new Guid("3e862a43-e19d-4aea-85b4-7db06f754476")
                        },
                        new
                        {
                            Id = new Guid("bf01faf6-1318-4bbd-804e-2a5ed763a66e"),
                            ImgUrl = "https://upload.wikimedia.org/wikipedia/commons/thumb/a/ab/Patates.jpg/1200px-Patates.jpg",
                            Name = "Potato",
                            ParentId = new Guid("bac1ed53-a0b7-45f0-b7cd-0a02594c288e")
                        },
                        new
                        {
                            Id = new Guid("01f1501c-3186-4daa-9619-0c5e85148f99"),
                            ImgUrl = "https://btiscience.org/wp-content/uploads/US-Watermelon-Varieties_600dpi.jpg",
                            Name = "Watermelon",
                            ParentId = new Guid("4a359462-d15c-45b1-b063-fdea96d560e2")
                        },
                        new
                        {
                            Id = new Guid("0ea84195-b170-4950-8888-564da31bc806"),
                            ImgUrl = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSp05ca_Cf1CqlqghC5DgeX3PNdU-Kup6h1GQ&s",
                            Name = "Avocado",
                            ParentId = new Guid("4a359462-d15c-45b1-b063-fdea96d560e2")
                        });
                });

            modelBuilder.Entity("GreenMarket.DAL.Entities.OrderEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float?>("Rating")
                        .HasColumnType("real");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("GreenMarket.DAL.Entities.ProductAttributeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AttributeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("AttributeId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductAttribute");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2bbf898d-a584-49be-acf0-42e03426bc49"),
                            AttributeId = new Guid("9bb70179-0832-4361-8f56-d01266499f6b"),
                            ProductId = new Guid("adf04862-7013-4c75-bb53-5ae28b37940d"),
                            Value = "25"
                        },
                        new
                        {
                            Id = new Guid("0c4af471-c2f6-4c9d-aa7b-c40d51f7f6c6"),
                            AttributeId = new Guid("9bb70179-0832-4361-8f56-d01266499f6b"),
                            ProductId = new Guid("c1e9456d-e94d-4e2b-9359-0c79d8ea54fd"),
                            Value = "35"
                        },
                        new
                        {
                            Id = new Guid("a8ef55c3-296d-42ec-b544-46970c393320"),
                            AttributeId = new Guid("ea132e15-a0ec-4f59-b934-37a93ebd7913"),
                            ProductId = new Guid("a0821916-1ed6-406d-825d-6795e46a52a1"),
                            Value = "100"
                        },
                        new
                        {
                            Id = new Guid("e8b4953e-14b3-4909-9b74-b73f73e508f5"),
                            AttributeId = new Guid("ea132e15-a0ec-4f59-b934-37a93ebd7913"),
                            ProductId = new Guid("a000d9d3-f87c-4f85-9278-757a45024c1f"),
                            Value = "80"
                        },
                        new
                        {
                            Id = new Guid("bf0c450e-d225-47f8-bfe7-164b1315344b"),
                            AttributeId = new Guid("5a53d730-c8e4-4c63-ae68-3f5461f883db"),
                            ProductId = new Guid("adf04862-7013-4c75-bb53-5ae28b37940d"),
                            Value = "Czechia"
                        },
                        new
                        {
                            Id = new Guid("810a8eff-20a5-4a6a-8600-be44841cb926"),
                            AttributeId = new Guid("5a53d730-c8e4-4c63-ae68-3f5461f883db"),
                            ProductId = new Guid("c1e9456d-e94d-4e2b-9359-0c79d8ea54fd"),
                            Value = "Puerto Rico"
                        });
                });

            modelBuilder.Entity("GreenMarket.DAL.Entities.ProductEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatorId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a000d9d3-f87c-4f85-9278-757a45024c1f"),
                            CategoryId = new Guid("bf01faf6-1318-4bbd-804e-2a5ed763a66e"),
                            CreatorId = new Guid("9732dc8c-b504-462c-8331-b5be8641d384"),
                            ImgUrl = "https://seedlefarms.com/wp-content/uploads/2022/01/Orange-Sweet-Potatoe.jpg",
                            Name = "Orange sweet",
                            Stock = 3
                        },
                        new
                        {
                            Id = new Guid("a0821916-1ed6-406d-825d-6795e46a52a1"),
                            CategoryId = new Guid("bf01faf6-1318-4bbd-804e-2a5ed763a66e"),
                            CreatorId = new Guid("9732dc8c-b504-462c-8331-b5be8641d384"),
                            ImgUrl = "https://www.kroger.com/product/images/large/front/0000000004072?banner=harristeeter",
                            Name = "Russet",
                            Stock = 4
                        },
                        new
                        {
                            Id = new Guid("a3cb1ca5-8eb8-4366-b3f5-9a6038fe8861"),
                            CategoryId = new Guid("238b1023-30bc-4354-9752-18bb831ec690"),
                            CreatorId = new Guid("c6b0b352-2359-46a1-8f9f-137d11c6ceb6"),
                            Description = "A sweet and smooth tomino, offering a unique balance of sweetness and creaminess.",
                            Name = "Anton's tasty tomino",
                            Stock = 5
                        },
                        new
                        {
                            Id = new Guid("eb3dedd5-7a8c-4d8a-9b65-435dc7654493"),
                            CategoryId = new Guid("238b1023-30bc-4354-9752-18bb831ec690"),
                            CreatorId = new Guid("094b45c6-b3c9-4550-ab6c-f92ded816167"),
                            Description = "A delicious, creamy tomino with a rich, savory flavor. Perfect for any tomato lover!",
                            Name = "Ilya's sweet tomino",
                            Stock = 1
                        },
                        new
                        {
                            Id = new Guid("54c3ddd3-b36a-4708-8915-5891ab95d73f"),
                            CategoryId = new Guid("01f1501c-3186-4daa-9619-0c5e85148f99"),
                            CreatorId = new Guid("c6b0b352-2359-46a1-8f9f-137d11c6ceb6"),
                            Name = "Augusta",
                            Stock = 2
                        },
                        new
                        {
                            Id = new Guid("42fe9ecd-9405-40d2-ac6a-8ae4ecba7b2e"),
                            CategoryId = new Guid("01f1501c-3186-4daa-9619-0c5e85148f99"),
                            CreatorId = new Guid("c6b0b352-2359-46a1-8f9f-137d11c6ceb6"),
                            Name = "Dragon King",
                            Stock = 3
                        },
                        new
                        {
                            Id = new Guid("5b52eab1-f554-4123-b5fe-5b4b65f5d258"),
                            CategoryId = new Guid("01f1501c-3186-4daa-9619-0c5e85148f99"),
                            CreatorId = new Guid("c6b0b352-2359-46a1-8f9f-137d11c6ceb6"),
                            Name = "Happy family",
                            Stock = 10
                        },
                        new
                        {
                            Id = new Guid("adf04862-7013-4c75-bb53-5ae28b37940d"),
                            CategoryId = new Guid("0ea84195-b170-4950-8888-564da31bc806"),
                            CreatorId = new Guid("9732dc8c-b504-462c-8331-b5be8641d384"),
                            Description = "Fuerte avocados are medium to large with smooth, thick skin and a mild, creamy flavor. Perfect for slicing and enjoying in salads, or on toast.",
                            ImgUrl = "https://www.tomorrowsharvest.com/store/pub/media/catalog/product/cache/49e19764d17a195b05fde2ec48914513/2/2/2210_fuerte_avocado_fruit-full.jpg",
                            Name = "Fuerte",
                            Stock = 11
                        },
                        new
                        {
                            Id = new Guid("c1e9456d-e94d-4e2b-9359-0c79d8ea54fd"),
                            CategoryId = new Guid("0ea84195-b170-4950-8888-564da31bc806"),
                            CreatorId = new Guid("7bd14dd6-4bff-401e-b29d-4bac0c9eb808"),
                            Description = "Gwen avocados are a variety known for their creamy texture and rich, nutty flavor. They are slightly smaller than Has avocados and have a smoother texture.",
                            ImgUrl = "https://www.producemarketguide.com/media/user_v1oz1Yz27j/584/gwen-avocado_variety-page.png",
                            Name = "Gwen",
                            Stock = 5
                        });
                });

            modelBuilder.Entity("GreenMarket.DAL.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ImgUrl")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3eeba934-df32-4f1c-b01d-a9ef01c0f39d"),
                            Email = "admin@admin.com",
                            ImgUrl = "",
                            Name = "admin",
                            Password = "admin",
                            Role = 0,
                            Username = "admin"
                        },
                        new
                        {
                            Id = new Guid("9732dc8c-b504-462c-8331-b5be8641d384"),
                            Email = "maksim@mail.com",
                            ImgUrl = "https://i.natgeofe.com/n/548467d8-c5f1-4551-9f58-6817a8d2c45e/NationalGeographic_2572187_3x4.jpg",
                            Name = "Maksim",
                            Password = "123",
                            Role = 1,
                            Username = "MaksimDubr"
                        },
                        new
                        {
                            Id = new Guid("c6b0b352-2359-46a1-8f9f-137d11c6ceb6"),
                            Email = "anton@mail.com",
                            ImgUrl = "https://images.pexels.com/photos/1108099/pexels-photo-1108099.jpeg",
                            Name = "Anton",
                            Password = "123456",
                            Role = 1,
                            Username = "AntonHavl"
                        },
                        new
                        {
                            Id = new Guid("7bd14dd6-4bff-401e-b29d-4bac0c9eb808"),
                            Email = "nastya@mail.com",
                            ImgUrl = "https://cdn.pixabay.com/photo/2021/09/20/09/17/dog-6640280_1280.jpg",
                            Name = "Nastya",
                            Password = "1234",
                            Role = 1,
                            Username = "NastyaMiro"
                        },
                        new
                        {
                            Id = new Guid("094b45c6-b3c9-4550-ab6c-f92ded816167"),
                            Email = "ilya@mail.com",
                            ImgUrl = "https://cdn.pixabay.com/photo/2021/09/20/09/17/dog-6640280_1280.jpg",
                            Name = "Ilya",
                            Password = "123456",
                            Role = 1,
                            Username = "IlyaVeryBad"
                        });
                });

            modelBuilder.Entity("GreenMarket.DAL.Entities.AttributeEntity", b =>
                {
                    b.HasOne("GreenMarket.DAL.Entities.CategoryEntity", "Category")
                        .WithMany("Attributes")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("GreenMarket.DAL.Entities.CategoryEntity", b =>
                {
                    b.HasOne("GreenMarket.DAL.Entities.CategoryEntity", "Parent")
                        .WithMany("SubCategories")
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("GreenMarket.DAL.Entities.OrderEntity", b =>
                {
                    b.HasOne("GreenMarket.DAL.Entities.ProductEntity", "Product")
                        .WithMany("Orders")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GreenMarket.DAL.Entities.UserEntity", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GreenMarket.DAL.Entities.ProductAttributeEntity", b =>
                {
                    b.HasOne("GreenMarket.DAL.Entities.AttributeEntity", "Attribute")
                        .WithMany("Products")
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("GreenMarket.DAL.Entities.ProductEntity", "Product")
                        .WithMany("Attributes")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Attribute");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("GreenMarket.DAL.Entities.ProductEntity", b =>
                {
                    b.HasOne("GreenMarket.DAL.Entities.CategoryEntity", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GreenMarket.DAL.Entities.UserEntity", "Creator")
                        .WithMany("CreatedProducts")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("GreenMarket.DAL.Entities.AttributeEntity", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("GreenMarket.DAL.Entities.CategoryEntity", b =>
                {
                    b.Navigation("Attributes");

                    b.Navigation("Products");

                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("GreenMarket.DAL.Entities.ProductEntity", b =>
                {
                    b.Navigation("Attributes");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("GreenMarket.DAL.Entities.UserEntity", b =>
                {
                    b.Navigation("CreatedProducts");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
